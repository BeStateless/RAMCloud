Attempt to make RC work with RoCE

From: Daniel Noland <daniel.noland@gmail.com>


---
 src/HaveInfiniband.cc |    4 ++--
 src/InfUdDriver.cc    |    3 +--
 src/Infiniband.cc     |   12 ++++++------
 3 files changed, 9 insertions(+), 10 deletions(-)

diff --git a/src/HaveInfiniband.cc b/src/HaveInfiniband.cc
index 502ba65b..f353ffe6 100644
--- a/src/HaveInfiniband.cc
+++ b/src/HaveInfiniband.cc
@@ -23,8 +23,8 @@
 
 int main() {
     int r;
-    static_assert(IBV_QPT_RAW_ETH >= 0,
-            "Symbol `IBV_QPT_RAW_ETH` is undefined; consider upgrading "
+    static_assert(IBV_QPT_UD >= 0,
+            "Symbol `IBV_QPT_UD` is undefined; consider upgrading "
             "your libverbs.");
     ibv_free_device_list(ibv_get_device_list(&r));
     return r;
diff --git a/src/InfUdDriver.cc b/src/InfUdDriver.cc
index 3fa2e4d3..0b8eaea4 100644
--- a/src/InfUdDriver.cc
+++ b/src/InfUdDriver.cc
@@ -158,8 +158,7 @@ InfUdDriver::InfUdDriver(Context* context, const ServiceLocator *sl,
         throw DriverException(HERE, errno);
     }
 
-    qp = infiniband->createQueuePair(localMac ? IBV_QPT_RAW_ETH
-                                              : IBV_QPT_UD,
+    qp = infiniband->createQueuePair(IBV_QPT_UD,
                                      ibPhysicalPort, NULL,
                                      txcq, rxcq, MAX_TX_QUEUE_DEPTH,
                                      MAX_RX_QUEUE_DEPTH,
diff --git a/src/Infiniband.cc b/src/Infiniband.cc
index 93344f75..2280c580 100644
--- a/src/Infiniband.cc
+++ b/src/Infiniband.cc
@@ -520,7 +520,7 @@ Infiniband::QueuePair::QueuePair(Infiniband& infiniband, ibv_qp_type type,
       peerLid(0)
 {
     snprintf(peerName, sizeof(peerName), "?unknown?");
-    if (type != IBV_QPT_RC && type != IBV_QPT_UD && type != IBV_QPT_RAW_ETH)
+    if (type != IBV_QPT_RC && type != IBV_QPT_UD)
         throw TransportException(HERE, "invalid queue pair type");
 
     ibv_qp_init_attr qpia;
@@ -564,8 +564,6 @@ Infiniband::QueuePair::QueuePair(Infiniband& infiniband, ibv_qp_type type,
         mask |= IBV_QP_QKEY;
         mask |= IBV_QP_PKEY_INDEX;
         break;
-    case IBV_QPT_RAW_ETH:
-        break;
     default:
         assert(0);
     }
@@ -683,7 +681,7 @@ void
 Infiniband::QueuePair::activate(const Tub<MacAddress>& localMac)
 {
     ibv_qp_attr qpa;
-    if (type != IBV_QPT_UD && type != IBV_QPT_RAW_ETH)
+    if (type != IBV_QPT_UD)
         throw TransportException(HERE, "activate() called on wrong qp type");
 
     if (getState() != IBV_QPS_INIT) {
@@ -704,16 +702,17 @@ Infiniband::QueuePair::activate(const Tub<MacAddress>& localMac)
     // now move to RTS state
     qpa.qp_state = IBV_QPS_RTS;
     int flags = IBV_QP_STATE;
-    if (type != IBV_QPT_RAW_ETH) {
+    //if (type != IBV_QPT_RAW_ETH) {
         qpa.sq_psn = initialPsn;
         flags |= IBV_QP_SQ_PSN;
-    }
+    //}
     ret = ibv_modify_qp(qp, &qpa, flags);
     if (ret) {
         LOG(ERROR, "failed to transition to RTS state");
         throw TransportException(HERE, ret);
     }
 
+    /*
     if (type == IBV_QPT_RAW_ETH) {
         ibv_gid mgid;
         memset(&mgid, 0, sizeof(mgid));
@@ -723,6 +722,7 @@ Infiniband::QueuePair::activate(const Tub<MacAddress>& localMac)
             throw TransportException(HERE, ret);
         }
     }
+    */
 }
 
 /**
